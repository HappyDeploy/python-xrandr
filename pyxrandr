#!/usr/bin/env python
#
# pyxrandr
#
# Copyright 2007 Sebastian Heinlein
#                Michael Vogt
#                Canonical
#
# Licensed under the LGPL, see COPYRIGHT

from gettext import gettext as _
import gettext
gettext.textdomain("python-xrandr")

from optparse import OptionParser

from xrandr import xrandr

__version__ = "0.0.x(development)"

def main():
    parser = OptionParser(version=__version__)
    parser.add_option("-s", "--size",
                      default=None,
                      action="store", type="int", dest="size",
                      #TRANSLATORS: command line option
                      help=_("set the screen reolsution to the given size id"))
    parser.add_option("-r", "--rate",
                      default=None,
                      action="store", type="int", dest="rate",
                      #TRANSLATORS: command line option
                      help=_("set the given refresh rate"))
    parser.add_option("-o", "--rotate",
                      default=None,
                      action="store", type="string", dest="rotate",
                      #TRANSLATORS: command line option
                      help=_("rotate the screen. supported values are "
                             "normal, left, inverted, right or 0, 90, 180, "
                             "270"))
    parser.add_option("--output", "",
                      default=None,
                      action="store", type="string", dest="output",
                      #TRANSLATORS: command line option
                      help=_("select an available output"))
    parser.add_option("--disable", "",
                      action="store_true", dest="output_disable",
                      #TRANSLATORS: command line option
                      help=_("disable the selected output"))
    (options, args) = parser.parse_args()

    if xrandr.has_extension():
        print _("XRandR %s.%s") % xrandr.XRANDR_VERSION
    else:
        print _("The XRandR extension is not available")
        sys.exit(1)

    screen = xrandr.get_current_screen()
    cur_rate = screen.get_current_rate()
    cur_rotation = screen.get_current_rotation()
    cur_size = screen.get_current_size_index()

    if options.size != None:
        screen.set_config(options.size, cur_rotation, cur_rate)
    elif options.rate:
        if options.rate in screen.get_available_rates_for_size_index(cur_size):
            screen.set_config(cur_size, cur_rotation, options.rate)
        else:
            print _("The given refresh rate is not supported")
            sys.exit(1)
    elif options.rotate:
        if options.rotate in [_("normal"), "0"]:
            rotation = xrandr.RR_ROTATE_0
        elif options.rotate in [_("right"), "90"]:
            rotation = xrandr.RR_ROTATE_90
        elif options.rotate in [_("inverted"), "180"]:
            rotation = xrandr.RR_ROTATE_180
        elif options.rotate in [_("left"), "270"]:
            rotation = xrandr.RR_ROTATE_270
        else:
            print _("Invalid orientation")
            sys.exit(1)
        screen.set_config(options.size, rotation, cur_rate)
    elif options.output:
        output = screen.get_output_by_name(options.output)
        if not output:
            print _("Output does not exist")
            sys.exit(1)
        if options.output_disable:
            output.disable()
    else:
        screen.print_info()
    screen.get_available_rates_for_size_index(1)

if __name__ == "__main__":
    main()




# vim:ts=4:sw=4:et
